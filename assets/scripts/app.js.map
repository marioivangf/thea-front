{"version":3,"sources":["functions.js"],"names":["update_form_styles","cont","document","getElementById","v","value","tinycolor","isDark","getBrightness","darken","tmpl","question_templs","style_sheet","Mustache","render","write_styles","classList","toggle","style_id","css_text","style_el","getElementsByTagName","removeChild","createElement","type","id","innerHTML","appendChild","not_responsive_check","w","window","innerWidth","body","each_node_evt","selector","cb","nodes","querySelectorAll","_","each","node","addEventListener","each_node_evt_init_once","length","onetime","callback","e","target","removeEventListener","arguments","callee","dataset","pathName","event","input","currentTarget","sync_target","syncedInput","trim","textContent","placeholder","parentNode","parentClassToggle","stopPropagation","parent_clist","state_class","contains","remove","add","image","querySelector","files","reader","FileReader","onload","src","result","readAsDataURL","impostor","style","backgroundColor","Dropdown","Tabule","opts_string","sticker","Sticker","JSON","parse","list","sample","sample_clone","cloneNode","btn","clone","quests","quests_cont","quest_type_sel","option_check","opt","options","selectedIndex","console","log","display","dragula","removeOnSpill","moves","el","container","handle","sibling","children","Chart","defaults","global","title","gender_chart_dom","getContext","maintainAspectRatio","text","data","labels","datasets","age_chart_dom","label","patients_chart_dom","questions_source","questions","question","dragula_containers","i","block","push","drake","copy","source","accepts","on","element","def","questionDefinition","cancel","definition","rendered","wrapper","insertBefore"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n\n  // GLOBALS\n  var path_name = document.body.dataset.pathName;\n\n  // Not responsive validation\n  window.addEventListener('resize', not_responsive_check, true);\n  not_responsive_check();\n\n  // Sync input with else text\n  each_node_evt(\"[data-synced-input]\", \"keyup\", function (event) {\n    var input = event.currentTarget;\n    var sync_target = document.getElementById(input.dataset.syncedInput);\n    var value = input.value.trim();\n    sync_target.classList.toggle(\"clean\", value === \"\")\n    sync_target.textContent = (value === \"\") ? input.placeholder : value;\n  });\n\n  // Toggle password in inputs\n  each_node_evt(\"[data-password-toggle]\", \"mousedown\", function (event) {\n    var input = event.currentTarget.parentNode.getElementsByTagName(\"INPUT\")[0];\n    input.type = \"text\";\n  });\n  each_node_evt(\"[data-password-toggle]\", \"mouseup\", function (event) {\n    var input = event.currentTarget.parentNode.getElementsByTagName(\"INPUT\")[0];\n    input.type = \"password\";\n  });\n\n  // Toggle classes in parents\n  each_node_evt(\"[data-parent-class-toggle]\", \"click\", function (event) {\n    var target = event.currentTarget;\n    target.parentNode.classList.toggle(target.dataset.parentClassToggle);\n  });\n\n  // Toggle classes for dropdowns\n  each_node_evt(\"[data-dropdown-toggle]\", \"click\", function (event) {\n    event.stopPropagation();\n    var parent_clist = event.currentTarget.parentNode.classList;\n    var state_class = \"dropdown--opened\";\n    if (parent_clist.contains(state_class))\n      parent_clist.remove(state_class);\n    else {\n      parent_clist.add(state_class);\n      onetime(document, \"click\", function () {\n        parent_clist.remove(state_class);\n      });\n    }\n  });\n\n  // Image inputs with preview\n  each_node_evt(\"[data-image-input] input[type='file']\", \"change\", function (event) {\n\n    var input = event.currentTarget;\n    var image = input.parentNode.querySelector(\"img\");\n    if (input.files && input.files[0]) {\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        input.parentNode.classList.remove(\"clean\");\n        image.src = e.target.result;\n      }\n      reader.readAsDataURL(input.files[0]);\n    }\n  });\n\n  // Color inputs\n  _(document.querySelectorAll(\"[data-input-color]\")).each(function (node) {\n    var input = node.querySelector(\"[data-input]\");\n    var impostor = node.querySelector(\"[data-impostor]\");\n    input.addEventListener(\"change\", function (event) {\n      impostor.style.backgroundColor = input.value;\n    }, false);\n    impostor.style.backgroundColor = input.value;\n  })\n\n  // Dropdown inititalization\n  _(document.querySelectorAll(\"[data-dd]\")).each(function (node) {\n    new Dropdown(node);\n  })\n\n  // Tabule inititalization\n  _(document.querySelectorAll(\"[data-tabule]\")).each(function (node) {\n    new Tabule(node);\n  })\n\n  // Sticker JS init\n  _(document.querySelectorAll(\"[data-sticker]\")).each(function (node) {\n    var opts_string = node.dataset.sticker || \"{}\";\n    new Sticker(node, JSON.parse(opts_string));\n  });\n\n  // Adder for question options\n  _(document.querySelectorAll(\"[data-adder]\")).each(function (node) {\n    var list = node.querySelector(\"[data-adder-list]\");\n    var sample = node.querySelector(\"[data-adder-sample]\");\n    var sample_clone = sample.cloneNode(true);\n    var btn = node.querySelector(\"[data-adder-button]\");\n    btn.addEventListener(\"click\", function () {\n      var clone = sample_clone.cloneNode(true);\n      list.appendChild(clone);\n    });\n  });\n\n  // Questions creation init\n  var quests = document.getElementById(\"question-options\");\n  if (quests) {\n    var quests_cont = document.getElementById(\"quest-options-cont\");\n    var quest_type_sel = document.getElementById(\"quest-type\");\n    var option_check = function () {\n      var opt = quest_type_sel.options[quest_type_sel.selectedIndex];\n      console.log(opt.dataset.options);\n      quests_cont.style.display = opt.dataset.options ? \"block\" : \"none\";\n    };\n    quest_type_sel.addEventListener(\"change\", option_check);\n    option_check();\n    var quest_drake = dragula([quests], {\n      removeOnSpill: true,\n      moves: function (el, container, handle, sibling) {\n        if (container.children.length < 2) return false;\n        return handle.classList.contains(\"drag-handle\");\n      }\n    });\n  }\n\n  // Forms Statistics\n  Chart.defaults.global.title.display = true;\n\n  var gender_chart_dom = document.getElementById(\"pie-chart\");\n  if (gender_chart_dom) {\n    var gender_chart = new Chart(gender_chart_dom.getContext('2d'), {\n      type: 'doughnut',\n      options: {\n        maintainAspectRatio: false,\n        title: { text: \"Género de los pacientes\" }\n      },\n      data: {\n        labels: [\"Mujeres\", \"Hombres\"],\n        datasets: [{\n          backgroundColor: [\n            \"#34495e\",\n            \"#3498db\"\n          ],\n          data: [522, 323]\n        }]\n      }\n    });\n  }\n\n  var age_chart_dom = document.getElementById('age-chart');\n  if (age_chart_dom) {\n    var age_chart = new Chart(age_chart_dom.getContext('2d'), {\n      type: 'bar',\n      options: {\n        maintainAspectRatio: false,\n        title: { text: \"Edad promedio de los pacientes\" }\n      },\n      data: {\n        labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n        datasets: [{\n          label: 'Mujeres',\n          data: [12, 19, 3, 17, 6, 3, 7],\n          backgroundColor: \"#34495e\"\n        }, {\n          label: 'Hombres',\n          data: [2, 29, 5, 5, 2, 3, 10],\n          backgroundColor: \"#3498db\"\n        }]\n      }\n    });\n  }\n\n  var patients_chart_dom = document.getElementById('patients-chart');\n  if (patients_chart_dom) {\n    var patients_chart = new Chart(patients_chart_dom.getContext('2d'), {\n      type: 'line',\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          text: \"Promedio de encuestados\"\n        }\n      },\n      data: {\n        labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n        datasets: [{\n          label: 'Encuestados',\n          data: [40, 19, 42, 17, 56, 12, 38],\n          backgroundColor: \"#34495e\"\n        }]\n      }\n    });\n  }\n\n  // Dragula on forms construction\n  var questions_source = document.getElementById(\"questions-source\");\n\n  if (questions_source) {\n\n    var questions = [\"number\", \"multiple\", \"scale\", \"yes-no\", \"styles\"];\n    var question_templs = {};\n    _(questions).each(function (question) {\n      var tmpl = document.getElementById(question+\"-quest-tmpl\").innerHTML;\n      question_templs[question] = tmpl;\n      Mustache.parse(question_templs[question]);\n    });\n\n    var dragula_containers = [questions_source];\n    for (var i = 1; i < 5; i++) {\n      var block = document.getElementById(\"visit-block-\"+i);\n      dragula_containers.push(block);\n    }\n\n    var drake = dragula(dragula_containers, {\n      removeOnSpill: true,\n      copy: function (el, source) {\n        return source.id === \"questions-source\";\n      },\n      accepts: function (el, target) {\n        return target.id !== \"questions-source\";\n      },\n      moves: function (el, container, handle) {\n        if (container.id === \"questions-source\")\n          return true;\n        return handle.classList.contains(\"drag-handle\");\n      }\n    });\n\n    drake.on(\"drop\", function (element, container, src, sibling) {\n      var def = element.dataset.questionDefinition;\n      if (def) {\n        drake.cancel(true);\n        var definition = JSON.parse(def);\n        var tmpl = question_templs[definition.type];\n        var rendered = Mustache.render(tmpl, definition);\n        var wrapper= document.createElement(\"div\");\n        wrapper.innerHTML = rendered;\n        container.insertBefore(wrapper.children[0], sibling);\n      }\n    });\n  }\n\n  function update_form_styles () {\n\n    var cont = document.getElementById(\"af-container\");\n    // Get color values\n    var v = {};\n    v[\"bg\"] = document.getElementById(\"af-bg-color\").value;\n    v[\"accent\"] = document.getElementById(\"af-accent-color\").value;\n    // Calc colors\n    v[\"text\"] = tinycolor(v[\"bg\"]).isDark() ? \"white\" : \"rgba(0, 0, 0, 0.8)\"\n    v[\"input_bg\"] = (tinycolor(v[\"bg\"]).getBrightness() > 246) ? \"#ECECEC\" : \"white\";\n    v[\"accent_darken\"] = tinycolor(v[\"accent\"]).darken(5);\n    v[\"accent_text\"] = tinycolor(v[\"accent_darken\"]).isDark() ? \"white\" : \"rgba(0, 0, 0, 0.8)\";\n    // Set template\n    var tmpl = question_templs[\"styles\"];\n    var style_sheet = Mustache.render(tmpl, v);\n    write_styles(\"af-styles\", style_sheet);\n    // Change controls accordingly\n    cont.classList.toggle(\"af--dark\", tinycolor(v[\"bg\"]).isDark());\n  }\n\n  // Write styles directly for form customization\n  function write_styles (style_id, css_text) {\n    var style_el = document.getElementById(style_id);\n    if (style_el) document.getElementsByTagName(\"head\")[0].removeChild(style_el);\n    style_el = document.createElement('style');\n    style_el.type = \"text/css\";\n    style_el.id = style_id;\n    style_el.innerHTML = css_text;\n    document.getElementsByTagName(\"head\")[0].appendChild(style_el);\n  }\n\n  // Form styles update\n  each_node_evt_init_once(\"[data-appform-style-trigger]\", \"change\", update_form_styles);\n\n  function not_responsive_check () {\n    var w = window.innerWidth;\n    document.body.classList.toggle(\"not-responsive-notice\", w < 980);\n  }\n\n  function each_node_evt (selector, type, cb) {\n    var nodes = document.querySelectorAll(selector);\n    _(nodes).each(function (node) {\n      node.addEventListener(type, cb);\n    });\n  }\n\n  function each_node_evt_init (selector, type, cb) {\n    var nodes = document.querySelectorAll(selector);\n    _(nodes).each(function (node) {\n      node.addEventListener(type, cb);\n      cb();\n    });\n  }\n\n  function each_node_evt_init_once (selector, type, cb) {\n    var nodes = document.querySelectorAll(selector);\n    _(nodes).each(function (node) {\n      node.addEventListener(type, cb);\n    });\n    if (nodes.length > 0) cb();\n  }\n\n  function onetime (node, type, callback) {\n    // create event\n    node.addEventListener(type, function (e) {\n      // remove event\n      e.target.removeEventListener(e.type, arguments.callee);\n      // call handler\n      return callback(e);\n    });\n  }\n\n  function nodes_to_arr (nodes) {\n    return Array.prototype.slice.call(nodes);\n  }\n\n})();"]}